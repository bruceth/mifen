{"version":3,"file":"static/js/591.4652d579.chunk.js","mappings":"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","sources":["tonva-react/auth/register/VStart.tsx","tonva-react/auth/register/VVerify.tsx","tonva-react/auth/register/VPassword.tsx","tonva-react/auth/register/VSuccess.tsx","tonva-react/auth/register/CRegister.ts"],"sourcesContent":["import React from 'react';\r\nimport { VPage } from \"../../vm\";\r\nimport { tonvaTop, getSender } from '../tools';\r\nimport {nav, Schema, UiSchema, UiTextItem, UiButton, Form, Context, StringSchema, Ax} from '../../components';\r\nimport { CForget, CRegBase, CRegister } from './CRegister';\r\n\r\nexport abstract class VStart<T extends CRegBase> extends VPage<T> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n\tprivate uiSchema: UiSchema;\r\n\t\r\n\tabstract get accountLable():string;\r\n\tabstract get pageCaption():string;\r\n\r\n\tinit() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.accountLable,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n\t}\r\n\r\n\theader() {return this.pageCaption;}\r\n\r\n    content():JSX.Element {\r\n        return <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n\t\t\t{tonvaTop()}\r\n\t\t\t<div className=\"h-3c\" />\r\n\t\t\t<Form schema={this.schema} uiSchema={this.uiSchema} \r\n\t\t\t\tonButtonClick={this.onSubmit}\r\n\t\t\t\tonEnter={this.onEnter} \r\n\t\t\t\trequiredFlag={false} />\r\n\t\t\t<div className=\"text-center py-3\">\r\n\t\t\t\t<Ax href=\"/login\" className=\"text-primary\">已有账号，直接登录</Ax>\r\n\t\t\t</div>\r\n\t\t\t{nav.privacyEntry()}\r\n\t\t</div>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nexport class VRegisterStart extends VStart<CRegister> {\r\n\tget accountLable():string {return '账号'}\r\n\tget pageCaption():string {return '注册账号'}\r\n}\r\n\r\nexport class VForgetStart extends VStart<CForget> {\r\n\tfooter():JSX.Element {return null;}\r\n\tget accountLable():string {return '账号'}\r\n\tget pageCaption():string {return '密码找回'}\r\n}\r\n","import React from 'react';\r\nimport { VPage } from \"../../vm\";\r\nimport { CRegBase } from \"./CRegister\";\r\nimport {Schema, UiSchema, UiTextItem, UiButton, Form, Context, NumSchema} from '../../components';\r\n\r\nexport class VVerify extends VPage<CRegBase> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length !== 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n\t}\r\n\t\r\n\tprivate onVerify: (verify:string) => Promise<number>;\r\n\tinit(onVerify: (verify:string) => Promise<number>) {\r\n\t\tthis.onVerify = onVerify;\r\n\t}\r\n\r\n\tprivate onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = context.getValue('verify');\r\n        let ret = await this.onVerify(verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n\r\n\theader() {return '验证码'}\r\n\r\n\tcontent() {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <div className=\"w-max-20c my-5 py-5\"\r\n\t\t\tstyle={{marginLeft:'auto', marginRight:'auto'}}>\r\n\t\t\t验证码已经发送到{typeText}<br/>\r\n\t\t\t<div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n\t\t\t{extra}\r\n\t\t\t<div className=\"h-1c\" />\r\n\t\t\t<Form schema={this.schema} uiSchema={this.uiSchema} \r\n\t\t\t\tonButtonClick={this.onSubmit} \r\n\t\t\t\tonEnter={this.onEnter}\r\n\t\t\t\trequiredFlag={false} />\r\n\t\t</div>;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { VPage } from \"../../vm\";\r\nimport {nav, Page, Schema, UiSchema, UiPasswordItem, UiButton, Form, Context, StringSchema} from '../../components';\r\nimport { CForget, CRegBase, CRegister } from './CRegister';\r\n\r\nexport abstract class VPassword<T extends CRegBase> extends VPage<T> {\r\n\tprotected abstract get pageCaption():string;\r\n\tprotected abstract get submitCaption():string;\r\n\r\n\tget account():string {return this.controller.account}\r\n\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n\tprivate onButtonSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        let error:string;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            error = '密码错误，请重新输入密码！';\r\n            context.setError('pwd', error);\r\n        }\r\n        else {\r\n\t\t\terror = await this.controller.onPasswordSubmit(pwd);\r\n            if (error !== undefined) {\r\n                nav.push(<Page header=\"注册不成功\"><div className=\"p-5 text-danger\">{error}</div></Page>);\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onButtonSubmit('submit', context);\r\n        }\r\n    }\r\n\t\r\n\theader() {\r\n\t\treturn this.pageCaption;\r\n\t}\r\n\r\n\tcontent() {\r\n\t\tlet uiSchema: UiSchema = {\r\n\t\t\titems: {\r\n\t\t\t\tpwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n\t\t\t\trePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n\t\t\t\tsubmit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.submitCaption} as UiButton,\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn <div className=\"w-max-20c my-5 py-5\"\r\n\t\t\tstyle={{marginLeft:'auto', marginRight:'auto'}}>\r\n\t\t\t注册账号<br/>\r\n\t\t\t<div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.account}</b></div>\r\n\t\t\t<div className=\"h-1c\" />\r\n\t\t\t<Form schema={this.schema} uiSchema={uiSchema}\r\n\t\t\t\tonButtonClick={this.onButtonSubmit}\r\n\t\t\t\tonEnter={this.onEnter}\r\n\t\t\t\trequiredFlag={false} />\r\n\t\t</div>;\r\n    }\r\n}\r\n\r\nexport class VRegisterPassword extends VPassword<CRegister> {\r\n\tget pageCaption():string {return '注册账号'}\r\n\tget submitCaption():string {return '注册新账号'}\r\n}\r\n\r\nexport class VForgetPassword extends VPassword<CForget> {\r\n\tget pageCaption():string {return '账号密码'}\r\n\tget submitCaption():string {return '改密码'}\r\n}\r\n","import React from 'react';\r\nimport { VPage } from \"../../vm\";\r\nimport { CRegBase } from './CRegister';\r\n\r\nexport abstract class VSuccess extends VPage<CRegBase> {\r\n\theader() {return false;}\r\n}\r\n\r\nexport class VRegisterSuccess extends VSuccess {\r\n\tcontent() {\r\n    \tconst {account, login} = this.controller;\r\n\t\treturn <div className=\"container w-max-30c\">\r\n\t\t\t<div className=\"my-5\">\r\n\t\t\t\t<div className=\"py-5 text-center\">\r\n\t\t\t\t\t账号 <strong className=\"text-primary\">{account} </strong> 注册成功！\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"btn btn-success btn-block\" type=\"button\" onClick={()=>login(undefined)}>\r\n\t\t\t\t\t直接登录\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>;\r\n\t}\r\n}\r\n\r\nexport class VForgetSuccess extends VSuccess {\r\n\tcontent() {\r\n    \tconst {login} = this.controller;\r\n\t\treturn <div className=\"container w-max-30c\">\r\n\t\t\t<div className=\"my-5\">\r\n\t\t\t\t<div className=\"py-5 text-center text-success\">成功修改密码</div>\r\n\t\t\t\t<button className=\"btn btn-primary btn-block\" onClick={()=>login()}>\r\n\t\t\t\t\t登录账号\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t}\t\r\n}\r\n","import { Controller, VPage } from \"../../vm\";\r\nimport { nav } from '../../components';\r\nimport { VRegisterStart, VForgetStart } from './VStart';\r\nimport { userApi, RegisterParameter } from '../../net';\r\nimport { VVerify } from './VVerify';\r\nimport { VRegisterPassword, VForgetPassword } from './VPassword';\r\nimport { VForgetSuccess, VRegisterSuccess } from \"./VSuccess\";\r\n\r\nexport abstract class CRegBase extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n\tprotected abstract get VStart(): new(c:Controller) => VPage<any>;\r\n    protected async internalStart() {\r\n        this.openVPage(this.VStart);\r\n    }\r\n\r\n\tprotected get VVerify(): new(c:Controller) => VPage<any> {return VVerify as any};\r\n    toVerify() {\r\n        //this.account = account;\r\n        this.openVPage(this.VVerify, async (verify: string) => {\r\n\t\t\tthis.verify = verify;\r\n\t\t\tlet ret = await userApi.checkVerify(this.account, verify);\r\n\t\t\tif (ret === 0) return ret;\r\n\t\t\tthis.toPassword();\r\n\t\t});\r\n    }\r\n\r\n\tprotected abstract get VPassword(): new(c:Controller) => VPage<any>;\r\n    toPassword() {\r\n        this.openVPage(this.VPassword);\r\n    }\r\n\r\n\tprotected abstract get VSuccess(): new(c:Controller) => VPage<any>;\r\n    toSuccess() {\r\n        this.openVPage(this.VSuccess);\r\n\t}\r\n\r\n    login = async (account?:string) => {\r\n        let retUser = await userApi.login({user: account || this.account, pwd: this.password, guest: nav.guest});\r\n        if (retUser === undefined) {\r\n            alert('something wrong!');\r\n            return;\r\n        }\r\n\t\tawait nav.userLogined(retUser);\r\n\t\t//await nav.start();\r\n\t\tif (this.isWebNav) nav.navigate('/');\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.sendVerify(this.account, this.type, nav.oem);\r\n        this.toVerify();\r\n        return;\r\n    }\r\n\r\n    protected abstract accountError(isExists: number):string;\r\n\tabstract onPasswordSubmit(pwd:string):Promise<string>;\r\n}\r\n\r\nexport class CRegister extends CRegBase {\r\n\tprotected get VStart(): new(c:Controller) => VPage<any> {return VRegisterStart as any};\r\n\tprotected get VPassword(): new(c:Controller) => VPage<any> {return VRegisterPassword as any};\r\n\tprotected get VSuccess(): new(c:Controller) => VPage<any> {return VRegisterSuccess as any}\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async onPasswordSubmit(pwd:string):Promise<string> {\r\n\t\tthis.password = pwd;\r\n        let params: RegisterParameter = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            mobileCountry: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile':\r\n                params.mobile = Number(this.account);\r\n                params.mobileCountry=86;\r\n                break;\r\n            case 'email':\r\n                params.email = this.account;\r\n                break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        let error = this.regReturn(ret)\r\n        return error;\r\n\t}\r\n\t\r\n    private regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: return '服务器发生错误';\r\n            case 4: return '验证码错误';\r\n            case 0: return;\r\n            case 1: msg = '用户名 ' + this.account; break;\r\n            case 2: msg = '手机号 +' + this.account; break;\r\n            case 3: msg = '邮箱 ' + this.account; break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n}\r\n\r\nexport class CForget extends CRegBase {\r\n\tprotected get VStart(): new(c:Controller) => VPage<any> {return VForgetStart as any};\r\n\tprotected get VPassword(): new(c:Controller) => VPage<any> {return VForgetPassword as any};\r\n\tprotected get VSuccess(): new(c:Controller) => VPage<any> {return VForgetSuccess as any}\r\n\tprotected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n    async onPasswordSubmit(pwd:string):Promise<string> {\r\n\t\tthis.password = pwd;\r\n\t\tlet ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n\t\tif (ret.length === 0) {\r\n\t\t\tlet err = 'something wrong in reseting password';\r\n\t\t\tconsole.log(err);\r\n\t\t\tthrow err;\r\n\t\t}\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return;\r\n    }\r\n}\r\n\r\n"],"names":["VStart","schema","name","type","required","maxLength","uiSchema","onSubmit","context","clearContextErrors","user","value","getValue","undefined","sender","getSender","setError","length","controller","account","checkAccount","ret","onEnter","this","items","widget","label","accountLable","placeholder","verify","className","pageCaption","style","marginLeft","marginRight","tonvaTop","onButtonClick","requiredFlag","Ax","href","nav","VPage","VRegisterStart","VForgetStart","VVerify","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","onVerify","typeText","extra","VPassword","onButtonSubmit","values","form","data","pwd","rePwd","setValue","error","onPasswordSubmit","header","submitCaption","VRegisterPassword","VForgetPassword","VSuccess","VRegisterSuccess","login","onClick","VForgetSuccess","CRegBase","password","userApi","guest","retUser","alert","isWebNav","openVPage","toPassword","accountError","toVerify","Controller","CRegister","isExists","params","nick","country","mobile","mobileCountry","email","Number","toSuccess","regReturn","registerReturn","msg","CForget","err","console","log"],"sourceRoot":""}